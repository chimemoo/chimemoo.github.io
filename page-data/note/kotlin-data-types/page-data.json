{"componentChunkName":"component---src-templates-note-post-js","path":"/note/kotlin-data-types/","result":{"data":{"site":{"siteMetadata":{"title":"Christmemory Site"}},"markdownRemark":{"id":"13f9bee8-d7d5-5007-84cb-bea5f7b4367a","excerpt":"Apa saja tipe data pada kotlin? Character, String, Array, Numbers, Boolean Bagaimana menginisialisasi variabel pada kotlin? Dengan menggunakan keyword var atau…","html":"<h2>Apa saja tipe data pada kotlin?</h2>\n<p>Character, String, Array, Numbers, Boolean</p>\n<h3>Bagaimana menginisialisasi variabel pada kotlin?</h3>\n<p>Dengan menggunakan keyword var atau val</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Struktur inisialisasi</span>\n<span class=\"token keyword\">var</span> identifier<span class=\"token operator\">:</span> Type <span class=\"token operator\">=</span> initialization\n\n<span class=\"token comment\">// Contoh inisialisasi variabel</span>\n<span class=\"token keyword\">var</span> city<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token string\">\"Purwakarta\"</span></code></pre></div>\n<h3>Bedanya var dan val?</h3>\n<p>var dapat di reassign, sedangkan val tidak</p>\n<h3>Lebih lanjut?</h3>\n<p>Tipe data menentukan operasi apa yang bisa dilakukan pada data tersebut</p>\n<h2>Tipe Data Characters</h2>\n<p>Terdapat dua tipe data yang bisa kita gunakan, yaitu Characters dan String. Untuke mendefinisikan nilainya dapat ditaru di dalam kutip tunggak ”</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> character <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> character<span class=\"token operator\">:</span> Char <span class=\"token operator\">=</span> <span class=\"token string\">'ABC'</span> <span class=\"token comment\">// Will be error because Char only have 1 character</span></code></pre></div>\n<p>Kita dapat melakukan operasi increment (++) dan decrement (—) pada tipe data char</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> vocal <span class=\"token operator\">=</span> <span class=\"token string\">'A'</span>\n\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vocal \"</span> <span class=\"token operator\">+</span> vocal<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vocal \"</span> <span class=\"token operator\">+</span> vocal<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vocal \"</span> <span class=\"token operator\">+</span> vocal<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vocal \"</span> <span class=\"token operator\">+</span> vocal<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Vocal \"</span> <span class=\"token operator\">+</span> vocal<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n\nOutput :\nA\nB\nC\nD\nC\n\n*/</span></code></pre></div>\n<h2>Tipe Data String</h2>\n<p>Pada dasarnya String merupakan sekumpulan karakter berbentuk array sehingga kita dapat mendapatkan karakter tunggal dengan mudah dengan memanfaatkan indexing</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"Test\"</span>\n    <span class=\"token keyword\">val</span> firstChar <span class=\"token operator\">=</span> text<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Krakter pertama dari <span class=\"token interpolation variable\">$text</span> yaitu <span class=\"token interpolation variable\">$firstChar</span>\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">/*\n    output: Karakter pertama dari test yaitu T\n*/</span></code></pre></div>\n<p>Selain itu kita juga dapat melakukan iterasi pada char dalam string menggunakan for loop.</p>\n<h2>Tipe Data Array</h2>\n<p>Array memungkinkan kita menyimpan beberapa data dalam sebuah variabel. Array pada kotlin dapat didefinisikan dengan cara berikut</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Dapat memasukkan data yang memiliki tipe data sama</span>\n<span class=\"token keyword\">val</span> array <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Dapat juga menambahkan tipe data berbeda</span>\n<span class=\"token keyword\">val</span> mixArray <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Chimemoo\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Selain itu juga dapat membuat array dengan tipe data primitif yaitu: </p>\n<ul>\n<li>intArrayOf() : IntArray</li>\n<li>booleanArrayOf() : BooleanArray</li>\n<li>charArrayOf() : CharArray</li>\n<li>longArrayOf() : LongArray</li>\n<li>shortArrayOf() : ShortArray</li>\n<li>byteArrayOf() : ByteArray</li>\n</ul>\n<p>Selain menggunakan fungsi arrayOf kita (juga dapat menggunakan kelas Array</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> intArray <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> i <span class=\"token operator\">-></span> i <span class=\"token operator\">*</span> i <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// [0, 1, 4, 9]</span></code></pre></div>\n<p>Pada kode di atas kita menentukan angka 4 sebagai size Array. Fungsi lambda di atas ada dua. Pertama, untuk mengambil indeks Array yang akan digunakan sebagai argumen.</p>\n<h2>Tipe Data Numbers</h2>\n<p>Pada kotlin terdapat beberapa tipe bawaan yang merepresentasikan tipe data Number yaitu Double, Long, Int, Short, Byte. Setiap data memiliki satuan bit berbeda-beda.</p>\n<ul>\n<li>Int (32 Bit) : menyimpan data dari range -2^31 sampai +s^31-1 </li>\n<li>Long (64 Bit): range -2^63 sampai +2^63-1</li>\n<li>Short (16 Bit)</li>\n<li>Double (64 Bit)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> byteNumber<span class=\"token operator\">:</span> Byte <span class=\"token operator\">=</span> <span class=\"token number\">0b11010010</span>\n    <span class=\"token keyword\">val</span> intNumber <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">val</span> longNumber<span class=\"token operator\">:</span> Long <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n    <span class=\"token keyword\">val</span> longNumber2 <span class=\"token operator\">=</span> <span class=\"token number\">100L</span>\n    <span class=\"token keyword\">val</span> shortNumber<span class=\"token operator\">:</span> Short <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n    <span class=\"token keyword\">val</span> doubleNumber <span class=\"token operator\">=</span> <span class=\"token number\">1.3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Melakukan konversi</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> byteNumber<span class=\"token operator\">:</span> Byte <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">val</span> intNumber<span class=\"token operator\">:</span> Int <span class=\"token operator\">=</span> byteNumber<span class=\"token punctuation\">.</span><span class=\"token function\">toInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Menuliskan readable numerik</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> readableNumber <span class=\"token operator\">=</span> <span class=\"token number\">1_000_000</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>readableNumber<span class=\"token punctuation\">)</span> <span class=\"token comment\">// output 1000000</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Nullable Types</h2>\n<p>Dengan menggunakan Kotlin kita bisa dimudahkan utuk menghindari terjadinya NullPointerException yang sering terjadi ada java.</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Contoh eror</span>\n<span class=\"token keyword\">val</span> text<span class=\"token operator\">:</span> String <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// compile time error</span>\n\n<span class=\"token comment\">// Contoh untuk mengatasi nilai null</span>\n<span class=\"token keyword\">val</span> text<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span></code></pre></div>\n<p>Dengan menambahkan tanda tanya setelah tipe data yang ditentukan, kotlin akan memahami bahwa variabel tersebut bertipe data string tapi bisa juga null.</p>\n<h2>Safe Calls Operator (?)</h2>\n<p>Seperti javascript, kotlin memiliki Safe calls operator untuk menghindari aplikasi error karena data yang tersimpan bernilai null, contoh</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> text<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\ntext<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length</code></pre></div>\n<p>Kompiler kotlin akan langsung melewatkan baris text?.length jika nilainya null</p>\n<h2>Elvis Operator (?:)</h2>\n<p>Kita dapat menetapkan default number jika variabel bernilai null</p>\n<div class=\"gatsby-highlight\" data-language=\"kotlin\"><pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> text<span class=\"token operator\">:</span> String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n<span class=\"token keyword\">val</span> textLength <span class=\"token operator\">=</span> text<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">?:</span> <span class=\"token number\">7</span></code></pre></div>","frontmatter":{"title":"Belajar Tipe Data di Kotlin","date":"March 17, 2021","description":null}},"previous":{"fields":{"slug":"/apa-itu-dotnet/"},"frontmatter":{"title":"Apa itu .NET?"}},"next":{"fields":{"slug":"/dasar-cloud-aws/"},"frontmatter":{"title":"Dasar Cloud AWS"}}},"pageContext":{"id":"13f9bee8-d7d5-5007-84cb-bea5f7b4367a","previousNoteId":"420c5bdd-21f2-5d1a-9e86-998f6479885a","nextNoteId":"21711d00-6028-531a-9ec5-7d2104591ce1"}},"staticQueryHashes":["2841359383"]}