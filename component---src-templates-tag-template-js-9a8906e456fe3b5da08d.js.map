{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/gram.js","webpack://gatsby-starter-blog/./src/templates/tag-template.js"],"names":["StaticQuery","query","pageQuery","render","data","gram","nodes","className","style","color","Link","to","map","gramItem","i","showArrows","key","frontmatter","content","item","fluid","childImageSharp","pageContext","tag","allMarkdownRemark","edges","totalCount","tagHeader","title","node","slug","fields","date","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","excerpt"],"mappings":"0KAuCA,IAlCa,WACX,OACE,2BACE,gBAAC,EAAAA,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EAAOD,EAAKC,KAAKC,MACvB,OACE,2BACE,uBAAKC,UAAU,wBACb,sBAAIA,UAAU,6BAA6BC,MAAO,CAAEC,MAAO,YAA3D,oBACA,gBAAC,EAAAC,KAAD,CAAMH,UAAU,aAAaI,GAAG,SAAhC,WAEF,uBAAKJ,UAAU,oBAEXF,EAAKO,KAAI,SAACC,EAASC,GAAV,OACP,gBAAC,KAAD,CAAUC,YAAY,EAAMC,IAAKF,GAC9BD,EAASI,YAAYC,QAAQN,KAC5B,SAACO,EAAML,GAAP,OACE,gBAAC,IAAD,CAAKM,MAAOD,EAAKE,gBAAgBD,MAAOJ,IAAKF,EAAGP,UAAU,2BAiBpF,IAAML,EAAS,c,+FCWf,UA7Ca,SAAC,GAA2B,IAAzBoB,EAAwB,EAAxBA,YAAalB,EAAW,EAAXA,KACnBmB,EAAQD,EAARC,IAD8B,EAERnB,EAAKoB,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAGf,OACE,gBAAC,IAAD,KACE,uBAAKhB,UAAU,yCACb,uBAAKA,UAAU,cACf,gBAAC,IAAD,CAAKqB,MAAM,aACT,sBAAIrB,UAAU,QAAQoB,GACrBF,EAAMb,KAAI,YAAe,IAAZiB,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KADe,EAECD,EAAKZ,YAArBW,EAFe,EAEfA,MAAOI,EAFQ,EAERA,KACf,OACE,2BACEzB,UAAU,iBACV0B,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC,EAAAxB,KAAD,CAAMC,GAAI,QAAUmB,EAAMK,SAAS,OACjC,sBAAIA,SAAS,WAAW5B,UAAU,iDAAiDqB,IAErF,qBAAGrB,UAAU,sCAAsCyB,IAErD,2BACEI,wBAAyB,CAAEC,OAAQR,EAAKS,SACxCH,SAAS,cACT5B,UAAU,oCACVC,MAAO,CAAEC,MAAO,kBAM1B,2BACE,gBAAC,IAAD","file":"component---src-templates-tag-template-js-9a8906e456fe3b5da08d.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { graphql, Link, StaticQuery } from \"gatsby\"\nimport { Carousel } from 'react-responsive-carousel';\n\nconst Gram = () => {\n  return (\n    <div>\n      <StaticQuery\n        query={pageQuery}\n        render={data => {\n          const gram = data.gram.nodes\n          return (\n            <div>\n              <div className=\"flex justify-between\">\n                <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#001529' }}>Latest Blog Gram</h3>\n                <Link className=\"font-light\" to=\"/blog\">More â†’</Link>\n              </div>\n              <div className=\"grid grid-cols-1\">\n                {\n                  gram.map((gramItem,i) => (\n                    <Carousel showArrows={true} key={i}>\n                      {gramItem.frontmatter.content.map(\n                        (item, i) => (\n                          <Img fluid={item.childImageSharp.fluid} key={i} className=\"max-w-32\" />\n                        )\n                      )}\n                    </Carousel>\n                  ))\n                }\n              </div>\n            </div>\n          )\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Gram\n\nconst pageQuery = graphql`\n  query{\n    gram: allMarkdownRemark(\n      limit: 4\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/content/gram/\"}}\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          content {\n            childImageSharp {\n              fluid(maxWidth: 600) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Gram from \"../components/gram\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n  return (\n    <Layout>\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"col-span-2\">\n        <SEO title=\"All Tags\" />\n          <h1 className=\"mb-2\">{tagHeader}</h1>\n          {edges.map(({ node }) => {\n            const { slug } = node.fields\n            const { title, date } = node.frontmatter\n            return (\n              <article\n                className=\"blog-post mb-5\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <Link to={'/note' + slug} itemProp=\"url\">\n                    <h1 itemProp=\"headline\" className=\"text-3xl font-medium leading-10 tracking-wide\">{title}</h1>\n                  </Link>\n                  <p className=\"font-light text-sm tracking-widest\">{date}</p>\n                </header>\n                <section\n                  dangerouslySetInnerHTML={{ __html: node.excerpt }}\n                  itemProp=\"articleBody\"\n                  className=\"font-light leading-7 mt-2 text-sm\"\n                  style={{ color: '#4B4747' }}\n                />\n              </article>\n            )\n          })}\n        </div>\n        <div>\n          <Gram />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default Tags\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { \n        frontmatter: { tags: { in: [$tag] } } \n        fileAbsolutePath: {regex: \"/content/blog/\"}\n      }\n    ) {\n      totalCount\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n            description\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}