{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/gram.js","webpack://gatsby-starter-blog/./src/templates/blog-list-template.js"],"names":["StaticQuery","query","pageQuery","render","data","gram","nodes","className","style","color","Link","to","map","gramItem","i","showArrows","key","frontmatter","content","item","fluid","childImageSharp","pageContext","currentPage","isFirst","isLast","numPages","prevPage","toString","nextPage","posts","allMarkdownRemark","edges","title","post","itemScope","itemType","node","fields","slug","itemProp","date","dangerouslySetInnerHTML","__html","excerpt","rel"],"mappings":"2KAuCA,IAlCa,WACX,OACE,2BACE,gBAAC,EAAAA,YAAD,CACEC,MAAOC,EACPC,OAAQ,SAAAC,GACN,IAAMC,EAAOD,EAAKC,KAAKC,MACvB,OACE,2BACE,uBAAKC,UAAU,wBACb,sBAAIA,UAAU,6BAA6BC,MAAO,CAAEC,MAAO,YAA3D,oBACA,gBAAC,EAAAC,KAAD,CAAMH,UAAU,aAAaI,GAAG,SAAhC,WAEF,uBAAKJ,UAAU,oBAEXF,EAAKO,KAAI,SAACC,EAASC,GAAV,OACP,gBAAC,KAAD,CAAUC,YAAY,EAAMC,IAAKF,GAC9BD,EAASI,YAAYC,QAAQN,KAC5B,SAACO,EAAML,GAAP,OACE,gBAAC,IAAD,CAAKM,MAAOD,EAAKE,gBAAgBD,MAAOJ,IAAKF,EAAGP,UAAU,2BAiBpF,IAAML,EAAS,c,+FCsBf,UAxDwB,SAAC,GAA2B,IAAzBE,EAAwB,EAAxBA,KAAMkB,EAAkB,EAAlBA,YACvBC,EAA0BD,EAA1BC,YACFC,EAA0B,IAAhBD,EACVE,EAASF,IAFmBD,EAAbI,SAGfC,EAAWJ,EAAc,GAAM,EAAI,QAAxB,UAA4CA,EAAc,GAAGK,WACxEC,GAAYN,EAAc,GAAGK,WAC7BE,EAAQ1B,EAAK2B,kBAAkBC,MAErC,OACE,gBAAC,IAAD,KACG,gBAAC,IAAD,CAAKC,MAAM,cACZ,uBAAK1B,UAAU,yCACb,uBAAKA,UAAU,cACb,2BACGuB,EAAMlB,KAAI,SAAAsB,GAAI,OACb,2BACE3B,UAAU,iBACV4B,WAAS,EACTC,SAAS,6BAET,8BACE,gBAAC,EAAA1B,KAAD,CAAMC,GAAIuB,EAAKG,KAAKC,OAAOC,KAAMC,SAAS,OACxC,sBAAIA,SAAS,WAAWjC,UAAU,yEAAyE2B,EAAKG,KAAKpB,YAAYgB,QAEnI,qBAAG1B,UAAU,sCAAsC2B,EAAKG,KAAKpB,YAAYwB,OAE3E,2BACEC,wBAAyB,CAAEC,OAAQT,EAAKG,KAAKO,SAC7CJ,SAAS,cACTjC,UAAU,oCACVC,MAAO,CAAEC,MAAO,kBAKxB,uBAAKF,UAAU,8BACXiB,GACA,gBAAC,EAAAd,KAAD,CAAMC,GAAIgB,EAAUkB,IAAI,QAAxB,oBAIApB,GACA,gBAAC,EAAAf,KAAD,CAAMC,GAAI,SAAWkB,EAAUgB,IAAI,QAAnC,iBAMN,2BACE,gBAAC,IAAD","file":"component---src-templates-blog-list-template-js-851124f318bbf32b6aa4.js","sourcesContent":["import React from \"react\"\nimport Img from \"gatsby-image\"\nimport { graphql, Link, StaticQuery } from \"gatsby\"\nimport { Carousel } from 'react-responsive-carousel';\n\nconst Gram = () => {\n  return (\n    <div>\n      <StaticQuery\n        query={pageQuery}\n        render={data => {\n          const gram = data.gram.nodes\n          return (\n            <div>\n              <div className=\"flex justify-between\">\n                <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#001529' }}>Latest Blog Gram</h3>\n                <Link className=\"font-light\" to=\"/blog\">More →</Link>\n              </div>\n              <div className=\"grid grid-cols-1\">\n                {\n                  gram.map((gramItem,i) => (\n                    <Carousel showArrows={true} key={i}>\n                      {gramItem.frontmatter.content.map(\n                        (item, i) => (\n                          <Img fluid={item.childImageSharp.fluid} key={i} className=\"max-w-32\" />\n                        )\n                      )}\n                    </Carousel>\n                  ))\n                }\n              </div>\n            </div>\n          )\n        }}\n      />\n    </div>\n  )\n}\n\nexport default Gram\n\nconst pageQuery = graphql`\n  query{\n    gram: allMarkdownRemark(\n      limit: 4\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/content/gram/\"}}\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          content {\n            childImageSharp {\n              fluid(maxWidth: 600) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Gram from \"../components/gram\"\nimport SEO from \"../components/seo\"\n\nconst BlogListTempate = ({ data, pageContext }) => {\n  const { currentPage, numPages } = pageContext\n  const isFirst = currentPage === 1\n  const isLast = currentPage === numPages\n  const prevPage = currentPage - 1 === 1 ? \"/blog\" : `/blog/${(currentPage - 1).toString()}`\n  const nextPage = (currentPage + 1).toString()\n  const posts = data.allMarkdownRemark.edges\n\n  return (\n    <Layout>\n       <SEO title=\"Blog Post\" />\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <div className=\"col-span-2\">\n          <div>\n            {posts.map(post => (\n              <article\n                className=\"blog-post mb-5\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <Link to={post.node.fields.slug} itemProp=\"url\">\n                    <h1 itemProp=\"headline\" className=\"text-lg md:text-3xl font-medium leading-6 md:leading-10 tracking-wide\">{post.node.frontmatter.title}</h1>\n                  </Link>\n                  <p className=\"font-light text-sm tracking-widest\">{post.node.frontmatter.date}</p>\n                </header>\n                <section\n                  dangerouslySetInnerHTML={{ __html: post.node.excerpt }}\n                  itemProp=\"articleBody\"\n                  className=\"font-light leading-7 mt-2 text-sm\"\n                  style={{ color: '#4B4747' }}\n                />\n              </article>\n            ))}\n          </div>\n          <div className=\"my-8 flex justify-between\">\n            {!isFirst && (\n              <Link to={prevPage} rel=\"prev\">\n                ← Previous Page\n              </Link>\n            )}\n            {!isLast && (\n              <Link to={\"/blog/\" + nextPage} rel=\"next\">\n                Next Page →\n              </Link>\n            )}\n          </div>\n        </div>\n        <div>\n          <Gram />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogListTempate\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n      filter: {fileAbsolutePath: {regex: \"/content/blog/\"}}\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 300)\n          frontmatter {\n            date(formatString: \"DD MMMM, YYYY\")\n            title\n            description\n          }\n          fields {\n            slug\n          }\n        }\n      }\n    }\n    tags:allMarkdownRemark(\n      sort: {fields: [frontmatter___date], order: DESC}\n      filter: {fileAbsolutePath: {regex: \"/content/blog/\"}}\n    ) {\n      tag: group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n    }\n  }\n`;"],"sourceRoot":""}