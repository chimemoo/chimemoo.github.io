{"componentChunkName":"component---src-templates-blog-post-js","path":"/kamu-harus-coba-test-driven-development/","result":{"data":{"site":{"siteMetadata":{"title":"Christmemory Site"}},"markdownRemark":{"id":"ae750d6c-2d81-5c73-856e-1851851dc27b","excerpt":"Intro Apakah kamu seorang programmer/developer? Ketika kamu membuat sebuah program apakah kamu melakukan testing terlebih dahulu sebelum kode tersebut digunakanâ€¦","html":"<h2>Intro</h2>\n<p>Apakah kamu seorang programmer/developer? Ketika kamu membuat sebuah program apakah kamu melakukan testing terlebih dahulu sebelum kode tersebut digunakan? Jika tidak, <strong>segera bertobatlah</strong>, <strong>just kidding</strong> :). Pentingnya testing dalam tahap pengembangan program akan menjauhkan kita (programmer) dari hal yang tidak kita inginkan ketika program tersebut sudah berjalan di production. Oleh karena itu dalam setiap metode pengembangan software tahapan ini selalu ada.</p>\n<p>Namun melakukan testing pada program yang dibuat adalah hal yang cukup mahal (bisa jadi memakan waktu atau membutuhkan banyak resource) jika dilakukan manual, oleh karena itu muncul lah tool automated testing yang membantu tahapan ini. Dengan adanya tool tersebut proses testing jadi lebih cepat.</p>\n<h2>Apa itu Test Driven Development (TDD)?</h2>\n<p>Jika biasanya kamu hanya tahu bahwa testing berada di akhir proses pengembangan. Pada TDD, proses tersebut dibalik, dimana diawal penulisan kode, programmer menulis banyak sekali <code class=\"language-text\">test case</code>, kemudian berdasarkan <code class=\"language-text\">test case</code> tersebut kemudian programmer berusaha menulis kode yang bertujuan menyelesaikan test tersebut. Artinya kode yang dibuat harus lolos dalam uji coba yang ditentukan sebelumnya. Ketika kode yang dibuat berhasil melewati proses test, tahapan selanjutnya adalah refactor.</p>\n<h2>Mengapa Menulis Testing kode dilakukan diawal?</h2>\n<p>Hal ini dilakukan karena misalnya ketika kita menulis fungsi untuk mengecek apakah email valid atau tidak. Setelah menulis kode tersebut kita menulis <code class=\"language-text\">test case</code> nya. Namun yang terjadi misalnya, ternyata kode yang dibuat tidak bisa menyelesaikan salah satu <code class=\"language-text\">test case</code>, akibatnya kita harus merubah kembali fungsi yang dibuat sebelumnya dan kemudian melakukan test lagi. Hal tersebut bukanlah hal yang baik dilakukan, karena prosesnya menjadi lebih lambat dan tidak efisien. Oleh karena itulah TDD muncul untuk menyelesaikan masalah tersebut.</p>\n<h2>Studi Kasus</h2>\n<p>Saya seorang programmer diperintahkan oleh senior saya untuk membuat sebuah program untuk menghitung penjumlahan angka pada array. Yang pertama saya lakukan adalah menulis <code class=\"language-text\">test case</code> terlebih dahulu. Karena saya menggunakan <code class=\"language-text\">pytest</code> secara default nama file test harus diberi awalan nama <code class=\"language-text\">test_</code> sehingga nama file nya menjadi <code class=\"language-text\">test_sum_array.py</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sum_array <span class=\"token keyword\">import</span> sum_of_array\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">test_5_component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>sum_of_array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">test_4_component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>sum_of_array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">test_5_with_decimal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>sum_of_array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">15.5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Kemudian setelah menulis <code class=\"language-text\">test case</code> saya menulis fungsi untuk memecahkan masalah tersebut. Berikut <code class=\"language-text\">sum_array.py</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sum_of_array</span><span class=\"token punctuation\">(</span>ar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    total <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> ar<span class=\"token punctuation\">:</span>\n        total <span class=\"token operator\">=</span> total<span class=\"token operator\">+</span>i\n    <span class=\"token keyword\">return</span> total</code></pre></div>\n<p>Kemudian saya menjalankan kode test tersebut. Hasilnya adalah sebagai berikut :</p>\n<div class=\"gatsby-highlight\" data-language=\"console\"><pre class=\"language-console\"><code class=\"language-console\">root@c18a26593cfe:/home/workspace# pytest\n=================================================== test session starts ====================================================\nplatform linux -- Python 3.6.3, pytest-5.4.3, py-1.8.1, pluggy-0.13.1\nrootdir: /home/workspace\nplugins: requests-mock-1.5.2\ncollected 3 items                                                                                                          \n\ntest_sum_array.py ...                                                                                                [100%]\n\n==================================================== 3 passed in 0.03s =====================================================</code></pre></div>\n<p>Berdasarkan hasil diatas, kode yang saya buat berhasil menyelesaikan <code class=\"language-text\">test case</code>.</p>\n<h2>Konklusi</h2>\n<p>Dengan adanya Test Driven Development ini proses pengembangan software menjadi lebih menarik, dan menurut saya seperti sebuah game dimana kita sebagai programmer harus bisa menyelesaikan kasus yang kita buat.</p>\n<p>Sekian.</p>","frontmatter":{"title":"Kamu harus coba Test Driven Development!","date":"June 14, 2020","description":"Apakah kamu seorang programmer/developer? Ketika kamu membuat sebuah program apakah kamu melakukan testing terlebih dahulu sebelum kode tersebut digunakan? Pentingnya testing dalam tahap pengembangan program akan menjauhkan kita (programmer) dari hal yang tidak kita inginkan ketika program tersebut sudah berjalan di production."}},"allMarkdownRemark":{"tag":[{"tag":"Clean code","totalCount":1},{"tag":"Dicoding","totalCount":1},{"tag":"Javascript","totalCount":1},{"tag":"Programming","totalCount":2},{"tag":"Python","totalCount":3},{"tag":"React","totalCount":1},{"tag":"React Native","totalCount":1},{"tag":"Submission","totalCount":1},{"tag":"Testing","totalCount":1},{"tag":"Tutorial","totalCount":1}]},"previous":{"fields":{"slug":"/pentingnya-optimasi-dalam-kode/"},"frontmatter":{"title":"Pentingnya Optimasi dalam Kode"}},"next":{"fields":{"slug":"/buat-carousel-dengan-react-hooks/"},"frontmatter":{"title":"Buat Carousel auto slide menggunakan React Hooks"}}},"pageContext":{"id":"ae750d6c-2d81-5c73-856e-1851851dc27b","previousPostId":"760bb85b-447d-5ca1-9228-f53e699806ae","nextPostId":"6ac889d3-0b5f-59b2-be66-16e0febb90c8"}},"staticQueryHashes":["2841359383"]}