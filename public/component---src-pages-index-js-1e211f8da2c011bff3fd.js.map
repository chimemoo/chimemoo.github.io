{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/tag.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"names":["_","require","Tag","tags","className","style","color","map","tag","key","Link","to","kebabCase","data","useStaticQuery","author","site","siteMetadata","social","S","layout","formats","src","width","height","quality","alt","name","summary","href","twitter","location","siteTitle","title","posts","allMarkdownRemark","nodes","gram","console","log","length","post","frontmatter","fields","slug","itemScope","itemType","itemProp","dangerouslySetInnerHTML","__html","description","excerpt","gramItem","i","showArrows","content","item","fluid","childImageSharp"],"mappings":"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","file":"component---src-pages-index-js-1e211f8da2c011bff3fd.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nconst _ = require('lodash')\n\nexport default function Tag({ tags }){\n  return (\n    <div className=\"mb-4\">\n      <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#001529' }}>Browse By Tag</h3>\n      <div className=\"grid grid-cols-5 gap-2\">\n        {tags.map(tag => (\n          <div className=\"p-1 bg-dark text-center\" key={tag.tag}>\n            <Link to={`/tags/${_.kebabCase(tag.tag)}`} className=\"text-xs text-white font-light\">\n              {tag.tag}\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"AUTO\", \"WEBP\", \"AVIF\"]}\n        src=\"../images/profile-pic.png\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> {author?.summary || null}\n          {` `}\n          <a href={`https://twitter.com/${social?.twitter || ``}`}>\n            You should follow them on Twitter\n          </a>\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Img from \"gatsby-image\"\nimport { Carousel } from 'react-responsive-carousel';\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Tag from \"../components/tag\"\n\nimport \"react-responsive-carousel/lib/styles/carousel.min.css\";\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n  const tags = data.allMarkdownRemark.tag\n  const gram = data.gram.nodes\n  console.log(gram);\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      {/* <Bio /> */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12\">\n        <div className=\"md:col-span-2\">\n          <div className=\"flex justify-between\">\n            <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#001529' }}>Latest Article</h3>\n            <Link className=\"font-light\" to=\"/blog\">More →</Link>\n          </div>\n          <div className=\"grid grid-cols-2 gap-2\">\n            {posts.map(post => {\n              const title = post.frontmatter.title || post.fields.slug\n\n              return (\n                <div key={post.fields.slug}>\n                  <article\n                    className=\"post-list-item\"\n                    itemScope\n                    itemType=\"http://schema.org/Article\"\n                  >\n                    <header className=\"mb-1\">\n                      <h2>\n                        <Link to={post.fields.slug} itemProp=\"url\">\n                          <span itemProp=\"headline\" className=\"font-normal leading-8\">{title}</span>\n                        </Link>\n                      </h2>\n                    </header>\n                    <section>\n                      <p\n                        dangerouslySetInnerHTML={{\n                          __html: post.frontmatter.description || post.excerpt,\n                        }}\n                        itemProp=\"description\"\n                        className=\"text-xs font-light tracking-wide leading-5\"\n                        style={{ color: '#020202' }}\n                      />\n                    </section>\n                  </article>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n        <div className=\"col-span-1\">\n          <Tag tags={tags} />\n        </div>\n      </div>\n      \n\n      <div className=\"mt-10\">\n        <div className=\"flex justify-between\">\n          <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#001529' }}>Latest Blog Gram</h3>\n          <Link className=\"font-light\" to=\"/blog\">More →</Link>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-4 lg:md-grid-cols-6 gap-1 md:gap-2 lg:gap-4\">\n          {\n            gram.map((gramItem,i) => (\n              <Carousel showArrows={true} key={i}>\n                {gramItem.frontmatter.content.map(\n                  (item, i) => (\n                    <Img fluid={item.childImageSharp.fluid} key={i} className=\"max-w-32\" />\n                  )\n                )}\n              </Carousel>\n            ))\n          }\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 4\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/content/blog/\"}}\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n        }\n      }\n      tag:group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n    }\n    gram: allMarkdownRemark(\n      limit: 4\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {fileAbsolutePath: {regex: \"/content/gram/\"}}\n      ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          content {\n            childImageSharp {\n              fluid(maxWidth: 600) {\n                ...GatsbyImageSharpFluid\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}