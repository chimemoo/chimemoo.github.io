{"version":3,"sources":["webpack://gatsby-starter-blog/./src/components/tag.js","webpack://gatsby-starter-blog/./src/templates/blog-post.js"],"names":["_","require","Tag","tags","className","style","color","map","tag","key","Link","to","kebabCase","data","location","post","markdownRemark","siteTitle","site","siteMetadata","title","allMarkdownRemark","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel","truncate"],"mappings":"uLAGMA,EAAIC,EAAQ,MAEH,SAASC,EAAT,GAAuB,IAARC,EAAO,EAAPA,KAC5B,OACE,uBAAKC,UAAU,QACb,sBAAIA,UAAU,6BAA6BC,MAAO,CAAEC,MAAO,YAA3D,iBACA,uBAAKF,UAAU,0BACZD,EAAKI,KAAI,SAAAC,GAAG,OACX,uBAAKJ,UAAU,0BAA0BK,IAAKD,EAAIA,KAChD,gBAAC,EAAAE,KAAD,CAAMC,GAAE,SAAWX,EAAEY,UAAUJ,EAAIA,KAAQJ,UAAU,iCAClDI,EAAIA,a,+FCNbR,EAAIC,EAAQ,MAoElB,UAlEyB,SAAC,GAAwB,IAAD,EAArBY,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKK,KAAKC,oBAAV,eAAwBC,QAAxB,QACZjB,EAAOU,EAAKQ,kBAAkBb,IAC5Bc,EAAmBT,EAAnBS,SAAUC,EAASV,EAATU,KAElB,OACE,gBAAC,IAAD,CAAQT,SAAUA,EAAUM,MAAOH,GACjC,gBAAC,IAAD,CACEG,MAAOL,EAAKS,YAAYJ,MACxBK,YAAaV,EAAKS,YAAYC,aAAeV,EAAKW,UAEpD,uBAAKtB,UAAU,mCACb,uBAAKA,UAAU,cACb,2BACEA,UAAU,YACVuB,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,WAAWzB,UAAU,iDAAiDW,EAAKS,YAAYJ,OACpG,qBAAGhB,UAAU,sCAAsCW,EAAKS,YAAYM,OAEtE,2BACEC,wBAAyB,CAAEC,OAAQjB,EAAKkB,MACxCJ,SAAS,cACTzB,UAAU,0CACVC,MAAO,CAAEC,MAAO,aAElB,sBAAIF,UAAU,UAEhB,uBAAKA,UAAU,sBACb,sBACEC,MAAO,CACL6B,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,0BACGhB,GACC,gBAAC,EAAAZ,KAAD,CAAMC,GAAIW,EAASiB,OAAOC,KAAMC,IAAI,OAAOrC,UAAU,QAArD,KACKJ,EAAE0C,SAASpB,EAASE,YAAYJ,MAAO,KAIhD,0BACGG,GACC,gBAAC,EAAAb,KAAD,CAAMC,GAAIY,EAAKgB,OAAOC,KAAMC,IAAI,OAAOrC,UAAU,QAC9CJ,EAAE0C,SAASnB,EAAKC,YAAYJ,MAAM,GADrC,UAQV,2BACE,gBAAC,IAAD,CAAKjB,KAAMA","file":"component---src-templates-blog-post-js-6700c1e8070a57191bf9.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\n\nconst _ = require('lodash')\n\nexport default function Tag({ tags }){\n  return (\n    <div className=\"mb-4\">\n      <h3 className=\"text-lg font-semibold mb-3\" style={{ color: '#001529' }}>Browse By Tag</h3>\n      <div className=\"grid grid-cols-5 gap-2\">\n        {tags.map(tag => (\n          <div className=\"p-1 bg-dark text-center\" key={tag.tag}>\n            <Link to={`/tags/${_.kebabCase(tag.tag)}`} className=\"text-xs text-white font-light\">\n              {tag.tag}\n            </Link>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport Tag from \"../components/tag\"\n\nconst _ = require('lodash')\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const tags = data.allMarkdownRemark.tag\n  const { previous, next } = data\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <div className=\"grid grid-cols-1 md:grid-cols-3\">\n        <div className=\"col-span-2\">\n          <article\n            className=\"blog-post\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n          >\n            <header>\n              <h1 itemProp=\"headline\" className=\"text-3xl font-medium leading-10 tracking-wide\">{post.frontmatter.title}</h1>\n              <p className=\"font-light text-sm tracking-widest\">{post.frontmatter.date}</p>\n            </header>\n            <section\n              dangerouslySetInnerHTML={{ __html: post.html }}\n              itemProp=\"articleBody\"\n              className=\"markdown-body font-light leading-7 mt-3\"\n              style={{ color: '#4B4747' }}\n            />\n            <hr className=\"my-5\" />\n          </article>\n          <nav className=\"blog-post-nav mb-4\">\n            <ul\n              style={{\n                display: `flex`,\n                flexWrap: `wrap`,\n                justifyContent: `space-between`,\n                listStyle: `none`,\n                padding: 0,\n              }}\n            >\n              <li>\n                {previous && (\n                  <Link to={previous.fields.slug} rel=\"prev\" className=\"mx-1\">\n                    ← {_.truncate(previous.frontmatter.title, 3)}\n                  </Link>\n                )}\n              </li>\n              <li>\n                {next && (\n                  <Link to={next.fields.slug} rel=\"next\" className=\"mx-1\">\n                    {_.truncate(next.frontmatter.title,3)} →\n                  </Link>\n                )}\n              </li>\n            </ul>\n          </nav>\n        </div>\n        <div>\n          <Tag tags={tags} />\n        </div>\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        description\n      }\n    }\n    allMarkdownRemark(\n      sort: {fields: [frontmatter___date], order: DESC}\n      filter: {fileAbsolutePath: {regex: \"/content/blog/\"}}\n    ) {\n      tag: group(field: frontmatter___tags) {\n        tag: fieldValue\n        totalCount\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}